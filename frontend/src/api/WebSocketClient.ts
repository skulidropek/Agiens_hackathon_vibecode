import type {
  WebSocketCommand,
  WebSocketMessage,
} from '../types';

type MessageHandler = (message: WebSocketMessage) => void;

/**
 * –ö–ª–∏–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
 */
export class WebSocketClient {
  private static instance: WebSocketClient; // –°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞

  private ws: WebSocket | null = null;
  private messageHandler: MessageHandler | null = null;
  private reconnectTimeout: NodeJS.Timeout | null = null;
  private reconnectAttempts = 0;
  private readonly maxReconnectAttempts = 10;
  private readonly reconnectInterval = 3000;
  private commandQueue: WebSocketCommand[] = [];

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ `new`
  private constructor() {}

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
  public static getInstance(): WebSocketClient {
    if (!WebSocketClient.instance) {
      WebSocketClient.instance = new WebSocketClient();
    }
    return WebSocketClient.instance;
  }

  public onMessage(handler: MessageHandler): void {
    console.log('WebSocketClient: Setting message handler', {
      hadPreviousHandler: !!this.messageHandler,
      timestamp: new Date().toISOString()
    });
    this.messageHandler = handler;
  }

  public connect(): void {
    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö CONNECTING –∏–ª–∏ OPEN ‚Äì –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ
    if (this.ws && (this.ws.readyState === WebSocket.OPEN || this.ws.readyState === WebSocket.CONNECTING)) {
      console.log('üîÑ WebSocket already connected/connecting, skipping', {
        readyState: this.ws.readyState,
        timestamp: new Date().toISOString()
      });
      return;
    }

    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const host = '127.0.0.1:3000'; // –Ø–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º IPv4 –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å dual-stack
    const wsUrl = `${protocol}//${host}/ws?type=files`;

    console.log('üîå Connecting to WebSocket:', wsUrl, new Date().toISOString());
    this.ws = new WebSocket(wsUrl);

    this.ws.onopen = () => {
      console.log('‚úÖ WebSocket connected', new Date().toISOString());
      this.reconnectAttempts = 0;
      if (this.reconnectTimeout) {
        clearTimeout(this.reconnectTimeout);
        this.reconnectTimeout = null;
      }
      // Process any queued commands
      this.processCommandQueue();
    };

    this.ws.onmessage = (event) => {
      try {
        const message = JSON.parse(event.data) as WebSocketMessage;
        
        if (message.type === 'connection_established') {
          console.log('Connection established with ID:', message.connectionId);
        }

        this.messageHandler?.(message);
      } catch (error) {
        console.error('Error parsing WebSocket message:', error);
      }
    };

    this.ws.onerror = (error) => {
      console.error('‚ùå WebSocket error:', error);
    };

    this.ws.onclose = (event) => {
      console.log('üîå WebSocket disconnected', {
        code: event.code,
        reason: event.reason,
        wasClean: event.wasClean,
        timestamp: new Date().toISOString()
      });
      this.scheduleReconnect();
    };
  }

  private scheduleReconnect(): void {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.error('Max reconnect attempts reached. Giving up.');
      return;
    }

    if (this.reconnectTimeout) {
      clearTimeout(this.reconnectTimeout);
    }

    this.reconnectAttempts++;
    const delay = this.reconnectInterval * this.reconnectAttempts;
    console.log(`Reconnecting in ${delay}ms (attempt ${this.reconnectAttempts})`, new Date().toISOString());

    this.reconnectTimeout = setTimeout(() => {
      console.log('Attempting WebSocket reconnect now...', new Date().toISOString());
      this.connect();
    }, delay);
  }

  private sendCommand(command: WebSocketCommand): void {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      console.log('‚û°Ô∏è  WebSocketClient: Sending command immediately', command, new Date().toISOString());
      this.ws.send(JSON.stringify(command));
    } else {
      console.warn('‚è≥ WebSocket not connected. Queuing command:', command, 'Current queue length:', this.commandQueue.length, new Date().toISOString());
      this.commandQueue.push(command);
    }
  }

  private processCommandQueue(): void {
    if (this.commandQueue.length === 0) {
      console.log('üü¢ Command queue is empty. Nothing to process.', new Date().toISOString());
    }
    while (this.commandQueue.length > 0) {
      const command = this.commandQueue.shift();
      if (command) {
        console.log('üöö Sending queued command:', command, 'Remaining queue length:', this.commandQueue.length, new Date().toISOString());
        this.sendCommand(command);
      }
    }
  }

  public startWatching(projectId: string): void {
    console.log('üì§ WebSocketClient: Sending file_watch_start command for project:', projectId, new Date().toISOString());
    this.sendCommand({
      type: 'file_watch_start',
      projectId,
    });
  }

  public stopWatching(projectId: string): void {
    this.sendCommand({ type: 'file_watch_stop', projectId });
  }

  public getFileContent(filePath: string): Promise<string> {
    // –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ REST API, –∞ –Ω–µ WebSocket
    // –Ω–æ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–≥–ª—É—à–∫—É –∏–ª–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞—Ç—å
    console.log(`[WebSocketClient] getFileContent called for: ${filePath}, but should be handled by REST.`);
    return Promise.reject('getFileContent should be handled via REST API');
  }

  public saveFileContent(filePath: string, content: string): void {
    this.sendCommand({
      type: 'file_save_content',
      filePath,
      content,
    });
  }
  
  public createFile(filePath: string, content?: string): void {
    this.sendCommand({
      type: 'file_create',
      filePath,
      content: content ?? '',
    });
  }

  public deleteFile(filePath: string): void {
    this.sendCommand({ type: 'file_delete', filePath });
  }

  public renameFile(oldPath: string, newPath: string): void {
    console.log('üìÅ WebSocketClient: Sending rename file command', { from: oldPath, to: newPath, timestamp: new Date().toISOString() });
    this.sendCommand({
      type: 'file_rename',
      oldPath,
      newPath
    });
  }

  public isConnected(): boolean {
    return this.ws !== null && this.ws.readyState === WebSocket.OPEN;
  }

  public forceReconnect(): void {
    console.log('üîÑ WebSocketClient: Forcing reconnection', new Date().toISOString());
    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }
    this.reconnectAttempts = 0;
    this.connect();
  }

  public disconnect(): void {
    if (this.reconnectTimeout) {
      clearTimeout(this.reconnectTimeout);
      this.reconnectTimeout = null;
    }
    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }
  }
} 