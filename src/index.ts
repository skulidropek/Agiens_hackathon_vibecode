import express from 'express';
import { createServer } from 'http';
import { WebSocketServer } from 'ws';
import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import dotenv from 'dotenv';

import { setupWebSocketRoutes } from './websocket/websocket-handler';
import { setupFileRoutes } from './routes/file-routes';
import { setupChatRoutes } from './routes/chat-routes';
import { setupProjectRoutes } from './routes/project-routes';
import { setupProjectFileRoutes } from './routes/project-file-routes';
import { errorHandler } from './middleware/error-handler';
import { logger } from './utils/logger';
import { AppConfig } from './config/app-config';
import { ProjectService } from './services/project-service';
import { ProjectChatService } from './services/project-chat-service';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const config = new AppConfig();
const app = express();
const server = createServer(app);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
const projectService = new ProjectService(config.workspaceDir);
const projectChatService = new ProjectChatService(projectService);

// Middleware
app.use(helmet());
app.use(compression());
app.use(cors({
  origin: config.corsOrigin,
  credentials: true
}));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  logger.info(`${req.method} ${req.path} - ${req.ip}`);
  next();
});

// –ú–∞—Ä—à—Ä—É—Ç—ã API
app.use('/api/files', setupProjectFileRoutes(projectChatService)); // Project-aware —Ñ–∞–π–ª—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
app.use('/api/files', setupFileRoutes()); // Fallback –¥–ª—è –æ–±—â–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use('/api/chat', setupChatRoutes(projectChatService)); // Project-aware —á–∞—Ç—ã
app.use('/api/projects', setupProjectRoutes(projectService));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use(errorHandler);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
const wss = new WebSocketServer({ 
  server,
  path: '/ws' 
});

setupWebSocketRoutes(wss);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(config.port, config.host, () => {
  logger.info(`üöÄ AI Coding Platform Backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${config.host}:${config.port}`);
  logger.info(`üì° WebSocket —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ ws://${config.host}:${config.port}/ws`);
  logger.info(`üîß –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${config.workspaceDir}`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...');
  server.close(() => {
    logger.info('–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});

process.on('SIGINT', () => {
  logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...');
  server.close(() => {
    logger.info('–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});

export { app, server, wss }; 